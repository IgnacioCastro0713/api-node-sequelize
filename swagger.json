{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "API Node Sequelize",
    "description": "Node.js Application API",
    "license": {
      "name": "MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api",
  "tags": [
    {
      "name": "End Points",
      "description": "API rest To Do app"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/auth/login" : {
      "post": {
        "tags": ["Authentication"],
        "summary": "Authenticate user",
        "description": "Authenticate user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "Credentials",
            "schema": {
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user authenticated",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Eduardo Jimenez"
                },
                "email": {
                  "type": "string",
                  "example": "email@email.com"
                },
                "token": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJuYW1lIjoiSWduYWNpbyIsImVtYWlsIjoiaWduYWNpb0BlbWFpbC5jb20ifSwiaWF0IjoxNTkyNTQyNzczLCJleHAiOjE1OTI1NDk5NzN9.g797rkJ_29-QoY-sCFzVvWrRRYZ0b7vuhvPwzt2a36c"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register" : {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register user",
        "description": "register user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User information",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }

    },
    "/users": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create new user",
        "description": "Create new user in the api rest",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Get all users from the api rest",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "number"
        }
      ],
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "summary": "Update user with give ID",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user with given ID",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User is deleted",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User Deleted Successfully"
                },
                "count": {
                  "type": "number",
                  "example": 1
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          }
        }
      }
    },
    "/projects": {},
    "/projects/{id}": {},
    "/tasks": {},
    "/tasks/{id}": {}
  },
  "definitions": {
    "User": {
      "required": [
        "name",
        "email",
        "password"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "array",
      "$ref": "#/definitions/User"
    },
    "UnauthorizedError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Access token is missing or invalid"
        }
      }
    }
  }
}